// Generated by IcedCoffeeScript 108.0.11
(function() {
  var BaseScraper, FacebookScraper, constants, decode_sig, iced, make_ids, url, username_normalize, usernames_equal, v_codes, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  BaseScraper = require('./base').BaseScraper;

  constants = require('../constants').constants;

  v_codes = constants.v_codes;

  decode_sig = require('kbpgp').ukm.decode_sig;

  make_ids = require('../base').make_ids;

  url = require('url');

  exports.FacebookScraper = FacebookScraper = (function(_super) {
    __extends(FacebookScraper, _super);

    function FacebookScraper(opts) {
      FacebookScraper.__super__.constructor.call(this, opts);
    }

    FacebookScraper.prototype._check_args = function(args) {
      if (!(args.username != null)) {
        return new Error("Bad args to Facebook proof: no username given");
      } else if (!(args.name != null) || (args.name !== 'facebook')) {
        return new Error("Bad args to Facebook proof: type is " + args.name);
      } else {
        return null;
      }
    };

    FacebookScraper.prototype.hunt2 = function(_arg, cb) {
      var err, name, proof_text_check, username;
      username = _arg.username, proof_text_check = _arg.proof_text_check, name = _arg.name;
      err = new Error("hunt2 is a no-op for Facebook");
      return cb(err, {});
    };

    FacebookScraper.prototype._check_api_url = function(_arg) {
      var api_url, rxx, username;
      api_url = _arg.api_url, username = _arg.username;
      rxx = new RegExp("^https://m.facebook.com/" + username + "/posts/[0-9]+$", "i");
      return (api_url != null) && api_url.match(rxx);
    };

    FacebookScraper.prototype.check_status = function(_arg, cb) {
      var api_url, err, fb_text, fb_username, proof_text_check, raw, rc, remote_id, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username, api_url = _arg.api_url, proof_text_check = _arg.proof_text_check, remote_id = _arg.remote_id;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/scrapers/facebook.iced",
            funcname: "FacebookScraper.check_status"
          });
          _this._get_url_body({
            url: api_url
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                rc = arguments[1];
                return raw = arguments[2];
              };
            })(),
            lineno: 57
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          if ((typeof err !== "undefined" && err !== null) || rc !== v_codes.OK) {
            return cb(err, rc);
          }
          _ref = _this._extract_username_and_text(raw), rc = _ref[0], fb_username = _ref[1], fb_text = _ref[2];
          if (rc !== v_codes.OK) {
            return cb(null, rc);
          }
          if (!usernames_equal(username, fb_username)) {
            _this.log("expected username '" + username + "' but found '" + fb_username + "'");
            return cb(null, v_codes.BAD_USERNAME);
          }
          if (proof_text_check.trim() !== fb_text.trim()) {
            _this.log("expected proof '" + proof_text_check + "' but found '" + fb_text + "'");
            return cb(null, v_codes.BAD_USERNAME);
          }
          return cb(null, v_codes.OK);
        };
      })(this));
    };

    FacebookScraper.prototype._extract_username_and_text = function(html) {
      var $, post_headers_selector, proof_text, user_profile_link, username, _ref, _ref1;
      $ = this.libs.cheerio.load(html);
      post_headers_selector = "#m_story_permalink_view > div:first-child > div:first-child > div:first-child h3";
      user_profile_link = $(post_headers_selector).eq(0).find('a').first().attr('href');
      if (user_profile_link == null) {
        this.log("failed to find link to author profile");
        return [v_codes.CONTENT_MISSING, null, null];
      }
      username = (_ref = url.parse(user_profile_link)) != null ? (_ref1 = _ref.pathname) != null ? _ref1.split("/")[1] : void 0 : void 0;
      if (username == null) {
        this.log("failed to parse author profile link: " + user_profile_link);
        return [v_codes.CONTENT_MISSING, null, null];
      }
      proof_text = $(post_headers_selector).eq(1).text();
      if ((proof_text == null) || proof_text === "") {
        this.log("failed to find proof text");
        return [v_codes.CONTENT_MISSING, null, null];
      }
      return [v_codes.OK, username, proof_text];
    };

    FacebookScraper.prototype._validate_text_check = function(_arg) {
      var err, med_id, msg, proof_text_check, signature, _ref;
      signature = _arg.signature, proof_text_check = _arg.proof_text_check;
      _ref = decode_sig({
        armored: signature
      }), err = _ref[0], msg = _ref[1];
      if (err == null) {
        med_id = make_ids(msg.body).med_id;
        if (proof_text_check.split(/\s+/).indexOf(med_id) < 0) {
          err = new Error("Cannot find " + med_id + " in " + proof_text_check);
        }
      }
      return err;
    };

    return FacebookScraper;

  })(BaseScraper);

  username_normalize = function(username) {
    return username.toLowerCase().replace(/\./g, '');
  };

  usernames_equal = function(user1, user2) {
    return username_normalize(user1) === username_normalize(user2);
  };

}).call(this);
