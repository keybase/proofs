// Generated by IcedCoffeeScript 108.0.11
(function() {
  var Base, EncKeyManager, KeyManager, RotateKey, TeamBase, constants, iced, make_esc, parse, schema, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  Base = require('./sig3').Base;

  constants = require('./constants').constants;

  parse = require('./parse3');

  _ref = require('kbpgp').kb, EncKeyManager = _ref.EncKeyManager, KeyManager = _ref.KeyManager;

  make_esc = require('iced-error').make_esc;

  schema = require('./schema3');

  exports.TeamBase = TeamBase = (function(_super) {
    __extends(TeamBase, _super);

    function TeamBase(args) {
      this.team_id = args.team_id;
      TeamBase.__super__.constructor.call(this, args);
    }

    TeamBase.prototype._v_encode_inner = function(_arg) {
      var json;
      json = _arg.json;
      return json.t = Buffer.from(this.team_id, 'hex');
    };

    TeamBase.prototype._v_extend_schema = function(schm) {
      return schm.set_key("t", schema.binary(16).name("team_id"));
    };

    TeamBase.prototype._v_decode_inner = function(_arg, cb) {
      var e, err, json, p;
      json = _arg.json;
      e = function(m) {
        return new Error(m);
      };
      p = function() {
        if (!parse.is_hex(json.t, 16)) {
          return e("need a team ID at t");
        }
        return null;
      };
      err = p();
      this.team_id = json.t;
      return cb(err);
    };

    return TeamBase;

  })(Base);

  exports.RotateKey = RotateKey = (function(_super) {
    __extends(RotateKey, _super);

    function RotateKey(args) {
      this.rotate_key = args.rotate_key;
      RotateKey.__super__.constructor.call(this, args);
    }

    RotateKey.prototype._v_encode_inner = function(_arg) {
      var json;
      json = _arg.json;
      RotateKey.__super__._v_encode_inner.call(this, {
        json: json
      });
      return json.b = {
        e: this.rotate_key.enc_km.key.ekid(),
        g: this.rotate_key.generation,
        r: null,
        s: this.rotate_key.sig_km.key.ekid()
      };
    };

    RotateKey.prototype._v_extend_schema = function(schm) {
      RotateKey.__super__._v_extend_schema.call(this, schm);
      return schm.set_key("b", schema.dict({
        g: schema.seqno().name("generation"),
        s: schema.kid().name("signing"),
        e: schema.enc_kid().name("encryption"),
        r: schema.binary(64).name("reverse_sig")
      }).name("body"));
    };

    RotateKey.prototype._v_decode_inner = function(_arg, cb) {
      var esc, json, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      json = _arg.json;
      esc = make_esc(cb);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/proofs/src/team_hidden.iced",
            funcname: "RotateKey._v_decode_inner"
          });
          RotateKey.__super__._v_decode_inner.call(_this, {
            json: json
          }, esc(__iced_deferrals.defer({
            lineno: 57
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.rotate_key = {
            generation: json.b.g
          };
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/proofs/src/team_hidden.iced",
              funcname: "RotateKey._v_decode_inner"
            });
            EncKeyManager.import_public({
              raw: json.b.e
            }, esc(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.enc_km = arguments[0];
                };
              })(_this.rotate_key),
              lineno: 59
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/proofs/src/team_hidden.iced",
                funcname: "RotateKey._v_decode_inner"
              });
              KeyManager.import_public({
                raw: json.b.s
              }, esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1.sig_km = arguments[0];
                  };
                })(_this.rotate_key),
                lineno: 60
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    RotateKey.prototype._v_link_type_v3 = function() {
      return constants.sig_types_v3.team.rotate_key;
    };

    RotateKey.prototype._v_do_reverse_sign = function() {
      return true;
    };

    RotateKey.prototype._v_assign_reverse_sig = function(_arg) {
      var inner, sig;
      sig = _arg.sig, inner = _arg.inner;
      return inner.b.r = sig;
    };

    RotateKey.prototype._v_get_reverse_sig = function(_arg) {
      var inner;
      inner = _arg.inner;
      return inner.b.r;
    };

    RotateKey.prototype._v_new_sig_km = function() {
      return this.rotate_key.sig_km;
    };

    RotateKey.prototype._v_chain_type_v3 = function() {
      return constants.seq_types.TEAM_HIDDEN;
    };

    return RotateKey;

  })(TeamBase);

}).call(this);
